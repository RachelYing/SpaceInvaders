;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname assignment8) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)
(require 2htdp/universe)

;;;; moship is a posn

(define-struct invader (posn id))
(define LEFT 'left)
(define RIGHT 'right)
(define UP 'up)
(define DOWN 'down)
(define TOTAL-INVADERS 36)
(define-struct ship (dir posn))
(define-struct world (ship loi losb loib moship tick life score))
(define BONUS 20)
(define SOCORE-INVADER 5)
(define SPEED 10)
(define TENSEC 10)
(define WIDTH 500) ;; canvas width in pixels
(define HEIGHT 500) ;; canvas height in pixels
(define INVADER-SIDE 20) ;; invader side in pixels
(define SHIP-WIDTH 40);; ship width in pixels
(define SHIP-HEIGHT 20) ;; ship height in picels
(define BULLET-SIDE 3) ;; bullet side in pixels
(define BACKGROUND(empty-scene WIDTH HEIGHT))
(define INVADER-IMAGE (square INVADER-SIDE 'solid 'red))
(define MOSHIP-IMAGE (square INVADER-SIDE 'solid 'blue))
(define SHIP-IMAGE (rectangle SHIP-WIDTH SHIP-HEIGHT 'solid 'black))
(define SHIP-BULLET-IMAGE (square BULLET-SIDE 'solid 'black))
(define INVADER-BULLET-IMAGE (square BULLET-SIDE 'solid 'red))
(define SHIP-INIT (make-ship RIGHT (make-posn 250 500)))
;;;; the mothership appears at 30 ticks after games start, by then invaders has
;;;; moved 3 * INVADER-SIDE  (10 tick one INVADER-SIDE long) distance. Also
;;;; mothership's width should be added to the result.
(define MOTHERSHIP-INIT (make-posn (- 0 (* 3 INVADER-SIDE) (/ INVADER-SIDE 2)) 40))
(define INVADER1 (make-invader (make-posn 50 70) 0))
(define INVADER2 (make-invader (make-posn 100 70) 1))
(define INVADER3 (make-invader (make-posn 150 70) 2))
(define INVADER4 (make-invader (make-posn 200 70) 3))
(define INVADER5 (make-invader (make-posn 250 70) 4))
(define INVADER6 (make-invader (make-posn 300 70) 5))
(define INVADER7 (make-invader (make-posn 350 70) 6))
(define INVADER8 (make-invader (make-posn 400 70) 7))
(define INVADER9 (make-invader (make-posn 450 70) 8))
(define INVADER10 (make-invader (make-posn 50 120) 9))
(define INVADER11 (make-invader (make-posn 100 120) 10))
(define INVADER12 (make-invader (make-posn 150 120) 11))
(define INVADER13 (make-invader (make-posn 200 120) 12))
(define INVADER14 (make-invader (make-posn 250 120) 13))
(define INVADER15 (make-invader (make-posn 300 120) 14))
(define INVADER16 (make-invader (make-posn 350 120) 15))
(define INVADER17 (make-invader (make-posn 400 120) 16))
(define INVADER18 (make-invader (make-posn 450 120) 17))
(define INVADER19 (make-invader (make-posn 50 170) 18))
(define INVADER20 (make-invader (make-posn 100 170) 19))
(define INVADER21 (make-invader (make-posn 150 170) 20))
(define INVADER22 (make-invader (make-posn 200 170) 21))
(define INVADER23 (make-invader (make-posn 250 170) 22))
(define INVADER24 (make-invader (make-posn 300 170) 23))
(define INVADER25 (make-invader (make-posn 350 170) 24))
(define INVADER26 (make-invader (make-posn 400 170) 25))
(define INVADER27 (make-invader (make-posn 450 170) 26))
(define INVADER28 (make-invader (make-posn 50 220) 27))
(define INVADER29 (make-invader (make-posn 100 220) 28))
(define INVADER30 (make-invader (make-posn 150 220) 29))
(define INVADER31 (make-invader (make-posn 200 220) 30))
(define INVADER32 (make-invader (make-posn 250 220) 31))
(define INVADER33 (make-invader (make-posn 300 220) 32))
(define INVADER34 (make-invader (make-posn 350 220) 33))
(define INVADER35 (make-invader (make-posn 400 220) 34))
(define INVADER36 (make-invader (make-posn 450 220) 35))
     
(define LOI-INIT (list INVADER1 INVADER2 INVADER3 INVADER4 INVADER5 INVADER6
                       INVADER7 INVADER8 INVADER9 INVADER10 INVADER11 INVADER12
                       INVADER13 INVADER14 INVADER15 INVADER16 INVADER17
                       INVADER18 INVADER19 INVADER20 INVADER21 INVADER22
                       INVADER23 INVADER24 INVADER25 INVADER26 INVADER27
                       INVADER28 INVADER29 INVADER30 INVADER31 INVADER32
                       INVADER33 INVADER34 INVADER35 INVADER36))

(define LOIB-INIT empty)
(define LOSB-INIT empty)
(define TICK-INIT 0)
(define LIFEMAX 3)
(define LIFE-INIT LIFEMAX)
(define SCORE-INIT 0)
(define WORLD-INIT
  (make-world SHIP-INIT LOI-INIT LOSB-INIT
              LOIB-INIT MOTHERSHIP-INIT TICK-INIT LIFE-INIT SCORE-INIT))


(define (life-image life)
  (text (number->string life) 36 "indigo"))

(define (score-image score)
  (text (number->string score) 20 "olive"))

;;;; Signature
;; draw-world: World -> Image
;;;; Purpose
;; GIVEN: a world
;; RETURNS: an image representation of the given world

;;;; Function Definition
(define (draw-world world)
  (draw-ship (world-ship world)
              (draw-loi (world-loi world)
                           (draw-losb (world-losb world)
                                      (draw-loib (world-loib world)
           (draw-moship (world-moship world)
                        (draw-life (world-life world)
                                   (draw-score (world-score world)
                BACKGROUND))))))))

;;;; question
;;;; 可合并

;;;; Signature
;; draw-ship: Ship Image -> Image

;;;; Purpose
;; GIVEN: a ship and an image
;; RETURNS: a new image that draws the ship on the given image

;;;; Function Definition
(define (draw-ship ship img)
  (place-image SHIP-IMAGE 
               (posn-x (ship-posn ship))
               (posn-y (ship-posn ship))
               img))

(define (draw-moship moship img)
  (place-image MOSHIP-IMAGE 
               (posn-x moship)
               (posn-y moship)
               img))

(define (draw-life life img)
  (place-image (life-image life) 20 480 img))

(define (draw-score score img)
  (place-image (score-image score)  250 20 img))

;;;; list of element
(define (draw-general lox fun1 fun2 imag img)
  (cond 
    [(empty? lox) img]
    [(cons? lox) (place-image imag
                       (fun1 (first lox))
                       (fun2 (first lox))
                       (draw-general (rest lox) fun1 fun2 imag img))]))

(define (invader-x invader)
     (posn-x (invader-posn invader)))
;;;;Tests
;;(check-expect (

(define (invader-y invader)
    (posn-y (invader-posn invader)))


(define (draw-loi loi img)
    (draw-general loi invader-x invader-y INVADER-IMAGE img))
;;;;Tests pass
;;(check-expect (draw-loi (list INVADER1 INVADER2 INVADER3) BACKGROUND)


(define (draw-losb losb img)
  (draw-general losb posn-x posn-y SHIP-BULLET-IMAGE img))

(define (draw-loib loib img)
  (draw-general loib posn-x posn-y INVADER-BULLET-IMAGE img))
;;;; Tests pass
;;(check-expect (draw-loib (list (make-posn 10 30) (make-posn 50 70) (make-posn 100 40)) BACKGROUND)

;;;; Signature 
;; posn-out-of-bounds : Posn -> Boolean
;;;; Purpose
;; GIVEN: a posn
;; RETURNS: true if the posn is out of bounds of the canvas, false otherwise
;;;; Function Definition
(define (posn-out-of-bounds point)
  (or (< (posn-x point) 0)
      (> (posn-x point) WIDTH)
      (< (posn-y point) 0)
      (> (posn-y point) HEIGHT)))
;;;; Tests
(check-expect (posn-out-of-bounds (make-posn -1 20)) #true)
(check-expect (posn-out-of-bounds (make-posn 1 20)) #false)
(check-expect (posn-out-of-bounds (make-posn 1 -20)) #true)
(check-expect (posn-out-of-bounds (make-posn 1 2000)) #true)
(check-expect (posn-out-of-bounds (make-posn 1000 20)) #true)

;;;; Signature 
;; ship-reach-bounds? : Ship -> Boolean
;;;; Purpose
;; GIVEN: a ship 
;; RETURNS: true if the ship reaches bounds, false otherwise

;;;; Function Definition
;; I make it to be"reach bounds" when the ship is SHIP-WIDTH/2 away from the
;;  bounds
(define (ship-reach-bounds? ship)
  (cond
    [(and (symbol=? LEFT (ship-dir ship))
          (<= (posn-x (ship-posn ship)) SHIP-WIDTH)) #true]
    [(and (symbol=? RIGHT (ship-dir ship))
          (>= (posn-x (ship-posn ship)) (- WIDTH  SHIP-WIDTH ))) #true]
    [else #false]))

;;;;Tests
(check-expect (ship-reach-bounds? SHIP-INIT) #false)
(check-expect (ship-reach-bounds? (make-ship LEFT (make-posn -1 500))) #true)
(check-expect (ship-reach-bounds? (make-ship RIGHT (make-posn 500 500))) #true)

;; Signature
;; move-spaceship: Ship -> Ship

;;;; Purpose:
;; GIVEN: a ship
;; RETURNS: the ship after it moves SPEED(10) pixels to right
(define (move-spaceship ship)
  (local (
          ;;;;
          (define (new-ship-right ship)
            (make-ship (ship-dir ship)
                       (make-posn (+ SPEED (posn-x (ship-posn ship)))
                                  (posn-y (ship-posn ship)))))
          ;;;;
          (define (new-ship-left ship)
              (make-ship (ship-dir ship)
                         (make-posn (- (posn-x (ship-posn ship)) SPEED)
                         (posn-y (ship-posn ship))))))
    (cond
    [(not (ship-reach-bounds? ship))
     (cond
       [(symbol=? RIGHT (ship-dir ship)) (new-ship-right ship)]
       [(symbol=? LEFT (ship-dir ship)) (new-ship-left ship)])]
    [(ship-reach-bounds? ship) ship])))

;;;; Tests
(check-expect (move-spaceship SHIP-INIT) (make-ship 'right (make-posn 260 500)))

(define (move-bullets lox fun)
  (cond
    [(empty? lox) lox]
    [(cons? lox)(cons (make-posn (posn-x (first lox))
                                     (fun (first lox))) 
                       (move-bullets (rest lox) fun))]))

(define (move-spaceship-bullets losb)
  (local (
          ;;;;
          (define (move-up sbullet)
            (-  (posn-y sbullet) SPEED)))
    (move-bullets losb move-up)))
;;;; Tests
(check-expect (move-spaceship-bullets
               (list (make-posn 10 20) (make-posn 20 50) (make-posn 100 200)))                          
(list (make-posn 10 10) (make-posn 20 40) (make-posn 100 190)))


(define (move-invader-bullets loib)
   (local (
          ;;;;
          (define (move-down sbullet)
            (+  (posn-y sbullet) SPEED)))
    (move-bullets loib move-down)))
;;;; Tests
(check-expect (move-invader-bullets
               (list (make-posn 10 20) (make-posn 20 50) (make-posn 100 200)))  
(list (make-posn 10 30) (make-posn 20 60) (make-posn 100 210)))


(define (bullet-max? lox max)
  (>= (length lox) max))

(define (invaders-fire loi loib)
  (local (
          ;;;;
          (define (ibullet-max? loib)
            (bullet-max? loib 10))
          ;;;;
          (define (new-invader-fire loi)
            (invader-posn (find-invader loi (id-generate (random 35) loi)))))
  (cond
    [(ibullet-max? loib) loib]
    [else (cons (new-invader-fire loi) loib)])))

;;;; Tests random 怎么test？
;;(check-expect (invaders-fire (list INVADER1 INVADER2 INVADER3)
;;                             (list (make-posn 10 30) (make-posn 50 70)
;;                                   (make-posn 100 40)))
;;(list (make-posn 50 30) (make-posn 10 30) (make-posn 50 70) (make-posn 100 40)))

(define (find-invader loi id)
     (cond
       [(= id (invader-id (first loi))) (first loi)]
       [else (find-invader (rest loi) id)]))

(define (id-generate id loi)
  (local (
          ;;;;
          (define (invader-exist? loi id)
            (cond
             [(empty? loi) #false]
             [(cons? loi)
            (cond
             [(= id (invader-id (first loi))) #true]
             [else (invader-exist? (rest loi) id)])])))
  (cond
    [(invader-exist? loi id) id]
    [else (id-generate (random (- TOTAL-INVADERS 1)) loi)])))


(define (ship-fire losb ship)
  (local (
          ;;;;
          (define MAXS 3)
          ;;;;
          (define (sbullet-max? losb)
            (bullet-max? losb MAXS)))
  (cond
    [(sbullet-max? losb) losb]
    [else (cons (ship-posn ship) losb)])))

(define (general-hit? element1 element2 measure1 measure2 fun1 fun2)
  (not (or (> (- (posn-y element1) BULLET-SIDE)
              (+ (fun2 element2) (/ measure1 2)))
           (< (+ (posn-y element1) BULLET-SIDE)
              (- (fun2 element2) (/ measure1 2)))
           (> (- (posn-x element1) BULLET-SIDE)
              (+ (fun1 element2) (/ measure2 2)))
           (< (+ (posn-x element1) BULLET-SIDE)
              (- (fun1 element2) (/ measure2 2))))))


(define (any-invader-hit? sbullet invader)
   (general-hit? sbullet invader INVADER-SIDE INVADER-SIDE invader-x invader-y))

;;;; Tests
(check-expect (any-invader-hit? (make-posn 20 200) INVADER9) #false)



(define (ship-x ship)
     (posn-x (ship-posn ship)))
;;;;Tests
;;(check-expect (

(define (ship-y ship)
    (posn-y (ship-posn ship)))

(define (ship-hit? ibullet ship)
   (general-hit? ibullet ship SHIP-HEIGHT SHIP-WIDTH ship-x ship-y))

(check-expect (ship-hit? (make-posn 20 200) SHIP-INIT) #false)

(define (ship-hitted? loib ship)
  (cond
    [(empty? loib) #false]
    [(cons? loib) (or (ship-hit? (first loib) ship)
     (ship-hitted? (rest loib) ship))]))

;;; 看看能不能并一下？
(define (invader-hit? sbullet loi)
  (cond
    [(empty? loi) #false]
    [(cons? loi)
     (cond
       [(any-invader-hit? sbullet (first loi)) #true]
       [else (invader-hit? sbullet (rest loi))])]))

;;;; Signature
;; invader-hitted?: LoSB Invader -> Boolean

;;;; Purpose
;; GIVEN: a list of spaceship bullets and a invader
;; RETURN: true if the invader is hitted by any of the bullet in the LoSB,
;;         otherwise false

;;;; Function Definition
(define (invader-hitted? losb invader)
  (cond
    [(empty? losb) #false]
    [(cons? losb)
     (cond
       [(any-invader-hit? (first losb) invader) #true]
       [else (invader-hitted? (rest losb) invader)])]))

(define (invader-hit-any losb loi)
  (cond
    [(empty? loi) #false]
    [(cons? loi)
     (cond
       [(invader-hitted? losb (first loi)) #true]
       [else (invader-hit-any losb (rest loi))])]))

(define (invader-remain losb loi)
  (cond
    [(empty? loi) empty]
    [(cons? loi)
     (cond
       [(invader-hitted? losb (first loi))
        (invader-remain losb (rest loi))]
       [else (cons (first loi) (invader-remain losb (rest loi)))])]))


(define (sbullets-out losb loi)
  (cond
    [(empty? losb) empty]
    [(cons? losb)
     (cond
       [(or (posn-out-of-bounds (first losb))
            (invader-hit? (first losb) loi))
        (sbullets-out (rest losb) loi)]
       [else (cons (first losb)(sbullets-out (rest losb) loi))])]))

;;;; Signature
;; ibullets-out: LoIB -> LoIB

;;;; Purpose
;; GIVEN: a list of invader bullets 
;; RETURN: a new list of ship bullets in which out of bounds bullets have been
;;         moved away

;;;; Function Definition
(define (ibullets-out loib)
  (cond
    [(empty? loib) empty]
    [(cons? loib)
     (cond
       [(posn-out-of-bounds (first loib))
        (ibullets-out (rest loib))]
       [else (cons (first loib)(ibullets-out (rest loib)))])]))


;;;; Signature
;; remove-hits-and-out-of-bounds: World -> World
;;;; Purpose
;; GIVEN: the current world
;; RETURN: a new world where
;; remove any invaders that have been hit by a spaceship bullet.
;; Remove any bullets that are out of bounds

;;;; Function Definition
;;; and mother ships
(define (remove-hits-and-out-of-bound world)
  (make-world (world-ship world)
              (invader-remain (world-losb world) (world-loi world))
              (sbullets-out (world-losb world)(world-loi world))
              (ibullets-out (world-loib world))
              (moship-out (world-losb world)(world-moship world))
              (world-tick world)
              (world-life world)
              (world-score world)))


;;;;;;;;;;;;;;; Part2   remember to change some functions to higher order functions
;;;; Signature: live-count: NonNegInteger -> NonNegInteger
(define (life-count life loib ship losb moship)
  (cond
    [(= 0 life) 0]
    [else
     (cond
       [(ship-hitted? loib ship) (- life 1 )]
       [(moship-hit? losb moship) (+ life 1)]
       [else life])]))

(define (ship-reappear-move loib ship)
  (cond
    [(ship-hitted? loib ship) SHIP-INIT]
    [else (move-spaceship ship)]))

(define (hit-mothership? sbullet moship)
   (general-hit? sbullet moship INVADER-SIDE INVADER-SIDE posn-x posn-y))

(define (moship-hit? losb moship)
  (cond
    [(empty? losb) #false]
    [(cons? losb) (or (hit-mothership? (first losb) moship)
     (moship-hit? (rest losb) moship))]))

(define (move-down invader)
  (make-invader (make-posn (posn-x (invader-posn invader))
                           (+ INVADER-SIDE (posn-y (invader-posn invader))))
                (invader-id invader)))
  
(define (invaders-move loi tick)
  (cond
    [(and (not (= 0 tick)) (= 0 (modulo tick TENSEC))) (map move-down loi)]
    [else loi]))

(define (moship-out losb moship)
  (cond
   [(moship-hit? losb  moship) (make-posn (/ INVADER-SIDE 2) (posn-y moship))]
   [else moship]))

(define (moship-move moship)
  (make-posn (+ SPEED (posn-x moship)) (posn-y moship)))

(define (bonus-score losb moship)
  (cond
    [(moship-hit? losb moship) BONUS]
    [else 0]))

(define (invader-kill-count losb loi)
  (- TOTAL-INVADERS (length (invader-remain losb loi))))

(define (score-acc losb score moship loi)
  (+ (* SOCORE-INVADER (invader-kill-count losb loi))
     (bonus-score losb moship)))

(define (touch-line? invader)
  (cond
    [(>= (posn-y (invader-posn invader))
         (- WIDTH SHIP-HEIGHT (/ INVADER-SIDE 2))) #true]
    [else #false]))

(define (any-touch-line? loi)
  (cond
    [(empty? loi) #false]
    [(cons? loi)
     (cond
       [(touch-line? (first loi)) #true] 
       [else (any-touch-line? (rest loi))])]))

(define (ticking tick)
  (+ 1 tick))

;;;;;;;;;;;;;;;;;;;;;;;;;
(define (world-step world)
    (remove-hits-and-out-of-bound
  (make-world (ship-reappear-move (world-loib world) (world-ship world))
              (invaders-move (world-loi world) (world-tick world))
              (move-spaceship-bullets
               (world-losb world))
              (move-invader-bullets
               (invaders-fire (invaders-move (world-loi world) (world-tick world))
                              (world-loib world)))
              (moship-move (world-moship world))
              (ticking (world-tick world))
              (life-count (world-life world)
                          (world-loib world)
                          (world-ship world)
                          (world-losb world)
                          (world-moship world))
              (score-acc (world-losb world)
                         (world-score world)
                         (world-moship world)
                         (world-loi world)))))

(define (key-handler world ke)
  (cond
    [(or (key=? ke "left") (key=? ke "right"))
     (make-world (make-ship (string->symbol ke) (ship-posn (world-ship world)))
                 (world-loi world)
                 (world-losb world)
                 (world-loib world)
                 (world-moship world)
                 (world-tick world)
                 (world-life world)
                 (world-score world))]
    [(key=? ke " ")  (make-world (world-ship world)
                                 (world-loi world)                                
                                 (ship-fire (world-losb world)
                                           (world-ship world))
                                 (world-loib world)
                                 (world-moship world)
                                 (world-tick world)
                                 (world-life world)
                                 (world-score world))]
    [else world]))


(define (end-game? world)
  (or (empty? (world-loi world))
      (= 0 (world-life world))
      (any-touch-line? (world-loi world))))
           
(big-bang WORLD-INIT
          (to-draw draw-world)
          (on-tick world-step 0.15)
          (on-key key-handler)
          (stop-when end-game?))
